//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public class VoxelPlanetBody : MonoBehaviour, VoxelStream
{

		private byte[,,] voxels;
		public int coreRadius;
		public int infrastructureRadius;
		public int surfaceRadius;
		public int shieldRadius;
		private int diameter;
		public int center;
		public void create (object o)
		{
		
				diameter = shieldRadius * 2;
				center = shieldRadius;
						
				Vector3 midPointVector = new Vector3 (center, center, center);
				voxels = new byte[diameter + 1, diameter + 1, diameter + 1];
			
				float test1 = Vector3.Distance (midPointVector, new Vector3 (0, 0, 0));
				float test2 = Vector3.Distance (midPointVector, new Vector3 (diameter + 1, diameter + 1, diameter + 1));
				Debug.Log ("south distance = " + test1);
				Debug.Log ("north distance = " + test2);
				
				//Create planetoid + buffer;
				for (int x = 0; x < diameter + 1; x++) {
						for (int y = 0; y < diameter + 1; y++) {
								for (int z = 0; z < diameter + 1; z++) {
										Vector3 point = new Vector3 (x, y, z);
										float distance = Vector3.Distance (midPointVector, point);
										if (distance > shieldRadius) {
												voxels [x, y, z] = 0;
										} else {
												voxels [x, y, z] = 1;
										}
								}
						}
				}
				
		}
		

		public byte GetBlockAtRelativeCoords (int x, int y, int z)
		{
				if (x > diameter || x < 0 || y > diameter || y < 0 || z > diameter || z < 0) {
						return 0;
				} else {
						return voxels [x, y, z];
				}
		}
		
		public	byte[,,] GetAllBlocks ()
		{
				return voxels;
		}
		
		public	Vector3 getBounds ()
		{
				return new Vector3 (voxels.GetLength (0), voxels.GetLength (1), voxels.GetLength (2));
		}
}


