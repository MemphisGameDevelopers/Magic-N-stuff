//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public class Octree
{
		private class OctNode
		{
				protected Vector3 position;
				protected int level;
				private OctNode[] children;
				private ChunkData dataChunk;
				private int size;
				
				public OctNode (int sizeIn, Vector3 positionIn, int distanceFromRoot)
				{
						size = sizeIn;
						position = positionIn;
						level = distanceFromRoot;
						
						Debug.Log (toString ());
				}
				
				public bool hasChildren ()
				{
						if (children == null) {
								return false;
						} else {
								return true;
						}
				}
				
				public void createChildren ()
				{
						children = new OctNode[8];
						int childRegionSize = size / 4;
						int childLevel = level + 1;
						
						//Bottom cubes
						Vector3 childDelta = new Vector3 (size / 4, -1 * size / 4, size / 4);
						children [(int)OctDirections.NorthEastBottom] = 
							new OctNode (childRegionSize, position + childDelta, childLevel);
							
						childDelta = new Vector3 (size / 4, -1 * size / 4, - 1 * size / 4);
						children [(int)OctDirections.SouthEastBottom] = 
							new OctNode (childRegionSize, position + childDelta, childLevel);
				
						childDelta = new Vector3 (-1 * size / 4, -1 * size / 4, -1 * size / 4);
						children [(int)OctDirections.SouthWestBottom] = 
							new OctNode (childRegionSize, position + childDelta, childLevel);
				
						childDelta = new Vector3 (-1 * size / 4, -1 * size / 4, size / 4);
						children [(int)OctDirections.NorthWestTop] = 
							new OctNode (childRegionSize, position + childDelta, childLevel);
							
						//Top cubes
						childDelta = new Vector3 (size / 4, size / 4, size / 4);
						children [(int)OctDirections.NorthEastTop] = 
							new OctNode (childRegionSize, position + childDelta, childLevel);
						
						childDelta = new Vector3 (size / 4, size / 4, - 1 * size / 4);
						children [(int)OctDirections.SouthEastTop] = 
							new OctNode (childRegionSize, position + childDelta, childLevel);
						
						childDelta = new Vector3 (-1 * size / 4, size / 4, -1 * size / 4);
						children [(int)OctDirections.SouthWestTop] = 
							new OctNode (childRegionSize, position + childDelta, childLevel);
						
						childDelta = new Vector3 (-1 * size / 4, size / 4, size / 4);
						children [(int)OctDirections.NorthWestTop] = 
							new OctNode (childRegionSize, position + childDelta, childLevel);
							
				}
		
				public String toString ()
				{
						String result = "Node Pos: " + position + "\n";
						result += "Tree Level: " + level + "\n";
						result += "Area Size: " + size + "\n";
						if (children == null) {
								result += "Children Count: 0\n";
						} else {
								result += "Children Count: " + children.Length + "\n";
						}
						return result;
				}
		}
		
		private OctNode root;
		private int size;
		
		public Octree (int sizeIn, Vector3 position)
		{
				size = sizeIn;
				root = new OctNode (size, position, 0);
				root.createChildren ();
		}

		

}

public enum OctDirections
{		
		NorthEastBottom, 
		SouthEastBottom, 
		SouthWestBottom, 
		NorthWestBottom,
		NorthEastTop, 
		SouthEastTop, 
		SouthWestTop, 
		NorthWestTop
}


