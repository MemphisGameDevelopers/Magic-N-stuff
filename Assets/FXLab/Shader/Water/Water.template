#setting indentation 1
#restrictpermutation Depth Reflection
#permutations *.shader Depth FlowMap Reflection Refraction Dispersion Decal
#file Simple.shader

Shader "FXLab/Water/#FileNameNoExtension#" {
	Properties {
	
		#begin !Decal
			#begin FlowMap
				_FlowMap ("Flow Map (RG = Direction B = Speed A = Foam Intensity)", 2D) = "gray" {}
			#end
			#begin !FlowMap
				_FlowSpeedX ("Flow X Speed", Float) = -0.1538462
				_FlowSpeedY ("Flow Y Speed", Float) = -0.1538462
			#end
			_WaveSpeed ("Wave Flow Factor", Vector) = (2, 4, 8, 16)
			_WaveScale ("Wave Scale", Vector) = (1, 2, 4, 8)
			_WaveInfluenceFactor ("Wave Influence Factor", Vector) = (1, 1, 1, 1)
		#end
		#begin !Refraction
			_MainTex ("MainTex", 2D) = "white" {}
		#end
		#begin Refraction
			_FXScreenTexture ("Screen Texture for Refraction (FXScreenBufferTexture)", 2D) = "" {}
		#end
		#begin Reflection
			_FXReflectionTexture ("Screen Texture for Reflection (FXReflectionTexture)", 2D) = "" {}
		#end

        _SpecColor ("Specular Color", Color) = (0.5, 0.5, 0.5, 1)
        _Specular ("Specular", Range (0.0, 2)) = 0.078125
		_Shininess ("Shininess", Range (1, 64)) = 64
        _BumpMap ("Bumpmap", 2D) = "bump" {}
        _DistortionStrength ("Distortion Strength", Float) = 10
        _FresnelNormalStrength ("Fresnel Normal Strength", Range(0.0, 1)) = 0.09615385
        _Fresnel ("Fresnel", Range (0.0, 1.0)) = 0.05769231
		_FresnelFactor ("Fresnel Factor", Float) = 4
		_FresnelBias ("Fresnel Bias", Float) = 0
		
        #begin Depth
			_ViewDepthColor ("View Depth Color", Color) = (0.0078, 0.5176, 0.7, 1)
			_DepthColor ("Depth Color", Color) = (0.0039, 0.00196, 0.145, 1)
			_ShoreHeight ("Shore Height", Float) = 0.8
			_MaxHeight ("Depth from Background to Reflection Height", Float) = 100
			_MaxViewDepth ("View Depth from Reflection to Background Plane", Float) = 20
			_FXDepthTexture ("Depth Texture (FXDepthTexture)", 2D) = "" {}
			_FXHeightTexture ("Height Texture (FXHeightTexture)", 2D) = "" {}
		#end
		#begin Dispersion
			_DispersionFactor ("Red Dispersion Factor", Float) = 1
		#end
		#begin Decal
			_MaskMap ("Mask Map (B)", 2D) = "white" {}
			_Transparency ("Transparency", Range(0, 1)) = 1
			_BumpUpInfluence ("Bump Up influence", Range(0, 1)) = 1
		#end
    }

    SubShader {
		#begin Decal
			Tags { "Queue"="Transparent-1" "RenderType" = "Water"}
		#end
		#begin !Decal
			Tags { "Queue"="Transparent-2" "RenderType" = "Water"}
		#end
        LOD 400
        Cull Off
		#begin Reflection 
			Lighting On
		#end
		#begin !Reflection 
			Lighting Off
		#end
        Blend SrcAlpha OneMinusSrcAlpha 
 
        CGPROGRAM
        #pragma surface surf WaterSpecular alpha noambient noforwardadd vertex:vert
        #pragma target 3.0

        #include "UnityCG.cginc"
        #include "Water.cginc"
                
        sampler2D _BumpMap;
		#begin !Refraction
			sampler2D _MainTex;
		#end
		#begin !Decal
		
			#begin FlowMap
				sampler2D _FlowMap;
			#end
			#begin !FlowMap
				half _FlowSpeedX;
				half _FlowSpeedY;
			#end
			
			half4 _WaveSpeed;
			half4 _WaveScale;
			half4 _WaveInfluenceFactor;
		#end
        fixed _Specular;
        float _Shininess;
                
		half _DistortionStrength;
		
		#begin Dispersion
			half _DispersionFactor;
		#end
                
		fixed _FresnelNormalStrength;
        fixed _Fresnel;
		half _FresnelFactor;
		fixed _FresnelBias;
		
		#begin Depth
			fixed _ShoreHeight;
			fixed3 _ViewDepthColor;
			fixed3 _DepthColor;
			
			half _MaxHeight;
			half _MaxViewDepth;
		#end

		#begin Decal
			sampler2D _MaskMap;
			fixed _Transparency;
			fixed _BumpUpInfluence;
			fixed _Scale;
		#end

		half4 LightingWaterSpecular (SurfaceOutput s, half3 lightDir, half3 viewDir, half atten) {
			half3 h = normalize (lightDir + viewDir);
 
			half diff = max (0, dot (s.Normal, lightDir));
 
			float nh = max (0, dot (s.Normal, h));
			float spec = pow (nh, _Shininess)* _Specular;
 
			half4 c;
			#begin !Refraction
				c.rgb = (s.Albedo * _LightColor0.rgb * diff + _LightColor0.rgb * spec) * (atten * 2);
			#end
			#begin Refraction
				c.rgb = s.Albedo + (_LightColor0.rgb * diff * _SpecColor.rgb * spec) * (atten * 2);
			#end
			c.a = s.Alpha;
			return c;
		}
                                
        struct Input 
		{
			#begin !Refraction
				float2 uv_MainTex;
			#end 
			#begin Decal
				float2 uv_MaskMap;
			#end
			#begin FlowMap
				float2 uv_FlowMap;
			#end
			float2 uv_BumpMap;
            float4 screenPos;
            float3 viewDir;
            float3 worldPosition;
        };
                
        void vert (inout appdata_full v, out Input o) {
			#begin Decal
				v.vertex.xyz *= _Scale;
			#end
			UNITY_INITIALIZE_OUTPUT(Input,o);
			o.worldPosition = mul(_Object2World, v.vertex);
		}
		
        void surf (Input IN, inout SurfaceOutput o)
		{
            float2 screenUv = calcScreenUv(IN.screenPos);
		
			#begin !Decal
				#begin FlowMap
					FLOW_MAP_TEXTURE();
				#end
				#begin !FlowMap
					FLOW_MAP(_FlowSpeedX, _FlowSpeedY);
				#end		

				half3 normal1 = _WaveInfluenceFactor.x * UnpackNormal(tex2D(_BumpMap, _WaveScale.x * IN.uv_BumpMap + flowMap.rg * _Time.x * _WaveSpeed.x));
				half3 normal2 = _WaveInfluenceFactor.y * UnpackNormal(tex2D(_BumpMap, _WaveScale.y * IN.uv_BumpMap + flowMap.rg * _Time.x * _WaveSpeed.y));
				half3 normal3 = _WaveInfluenceFactor.z * UnpackNormal(tex2D(_BumpMap, _WaveScale.z * IN.uv_BumpMap + flowMap.rg * _Time.x * _WaveSpeed.z));
				half3 normal4 = _WaveInfluenceFactor.w * UnpackNormal(tex2D(_BumpMap, _WaveScale.w * IN.uv_BumpMap + flowMap.rg * _Time.x * _WaveSpeed.w));
							
				fixed3 bumpNormal = normalize(normal1 + normal2 + normal3 + normal4);
			#end
			#begin Decal
				fixed3 bumpNormal = UnpackNormal(tex2D(_BumpMap, IN.uv_BumpMap));
			#end
			
            float2 screenUVOffset = bumpNormal.xy * _DistortionStrength / 100;
			
			o.Normal.xyz = normalize(bumpNormal);  

			#begin Depth
				float depth = sampleDepth(screenUv);
				float height = sampleHeight(screenUv);
			#end
			#begin Dispersion
				half3 dispersionFactor = half3(1, 1 + _DispersionFactor * 0.1, 1 + _DispersionFactor * 0.2);
			#end
			#begin Refraction
				
				#begin Dispersion
					fixed3 refr = sampleScreenDispersion(screenUv, screenUVOffset, dispersionFactor);
				#end
				#begin !Dispersion
					fixed3 refr = sampleScreen(screenUv + screenUVOffset);
				#end
				#begin Depth
					refr.xyz = COLOR_EXTINCTION(_ViewDepthColor, _DepthColor, _MaxViewDepth, _MaxHeight, refr.xyz);
				#end
			#end
			#begin !Refraction
				#begin !Decal
				
					fixed3 refr1 = _WaveInfluenceFactor.x * tex2D(_MainTex, _WaveScale.x * IN.uv_MainTex + flowMap.rg * _Time.x * _WaveSpeed.x);
					fixed3 refr2 = _WaveInfluenceFactor.y * tex2D(_MainTex, _WaveScale.y * IN.uv_MainTex + flowMap.rg * _Time.x * _WaveSpeed.y);
					fixed3 refr3 = _WaveInfluenceFactor.z * tex2D(_MainTex, _WaveScale.z * IN.uv_MainTex + flowMap.rg * _Time.x * _WaveSpeed.z);
					fixed3 refr4 = _WaveInfluenceFactor.w * tex2D(_MainTex, _WaveScale.w * IN.uv_MainTex + flowMap.rg * _Time.x * _WaveSpeed.w);
				
					fixed3 refr = (refr1 + refr2 + refr3 + refr4) / (_WaveInfluenceFactor.x + _WaveInfluenceFactor.y + _WaveInfluenceFactor.z + _WaveInfluenceFactor.w);
				#end
				#begin Decal
					fixed3 refr = tex2D(_MainTex, IN.uv_MainTex).rgb;
				#end
			#end
			#begin Reflection
				fixed3 refl;
				
				#begin Dispersion
					refl = sampleReflectionDispersion(screenUv, screenUVOffset, dispersionFactor);
				#end Dispersion
				#begin !Dispersion
					refl = sampleReflection(screenUv + screenUVOffset);
				#end !Dispersion
			#end
			#begin !Reflection
				fixed3 refl = 1;
			#end
            
            float over = max(0, Luminance(refr) - Luminance(refl));
			fixed fresnel = saturate(fresnelTerm(normalize(lerp(fixed3(0, 0, 1), o.Normal.xyz, _FresnelNormalStrength)), normalize(IN.viewDir), _Fresnel, _FresnelFactor, _FresnelBias) - over);
		
			o.Albedo = lerp(refr, refl, fresnel);
			#begin Depth
				o.Alpha = saturate(height / _ShoreHeight);
			#end
			#begin !Depth
				o.Alpha = 1;
			#end
			#begin Decal
				o.Alpha *= _Transparency * tex2D(_MaskMap, IN.uv_MaskMap).b * lerp(1, max(0, 1-bumpNormal.z), _BumpUpInfluence);			
			#end
        }
		ENDCG
		#begin !Reflection
			Lighting On
			Blend SrcAlpha OneMinusSrcAlpha 
			CGPROGRAM          
			#pragma surface surf WaterSpecular alpha noambient noforwardadd vertex:vert
			#pragma target 3.0
			
			#include "UnityCG.cginc"
			#include "Water.cginc"
					
			sampler2D _BumpMap;
					
			samplerCUBE _ReflectionCube;
			
			#begin !Decal
				#begin FlowMap
					sampler2D _FlowMap;
				#end
				#begin !FlowMap
					half _FlowSpeedX;
					half _FlowSpeedY;
				#end
				
				half4 _WaveSpeed;
				half4 _WaveScale;
				half4 _WaveInfluenceFactor;
			#end
						
			fixed _Specular;
			float _Shininess;
					
			half _DistortionStrength;
					
			fixed _FresnelNormalStrength;
			fixed _Fresnel;
			half _FresnelFactor;
			fixed _FresnelBias;
			
			#begin Depth
				fixed _ShoreHeight;
			#end
			
			#begin Decal
				sampler2D _MaskMap;
				fixed _Transparency;
				fixed _BumpUpInfluence;
				fixed _Scale;
			#end
			
			half4 LightingWaterSpecular (SurfaceOutput s, half3 lightDir, half3 viewDir, half atten) {
				half3 h = normalize (lightDir + viewDir);
	 
				half diff = max (0, dot (s.Normal, lightDir));
	 
				float nh = max (0, dot (s.Normal, h));
				float spec = pow (nh, _Shininess);
	 
				half4 c;
				c.rgb = s.Albedo + (_LightColor0.rgb * diff * _SpecColor.rgb * spec) * (atten * 2) * _Specular;
				c.a = s.Alpha;
				return c;
			}
	   
			struct Input {				
				#begin Decal
					float2 uv_MaskMap;
				#end
				#begin !Decal && FlowMap
					float2 uv_FlowMap;
				#end
				float2 uv_BumpMap;
				float3 viewDir;
				float4 screenPos;
				float3 worldRefl;
				INTERNAL_DATA 
			};
			
			void vert (inout appdata_full v, out Input o) {
				#begin Decal
					v.vertex.xyz *= _Scale;
				#end
				UNITY_INITIALIZE_OUTPUT(Input,o);
			}
	 
			void surf (Input IN, inout SurfaceOutput o) {
				#begin !Decal
					#begin FlowMap
						FLOW_MAP_TEXTURE();
					#end
					#begin !FlowMap
						FLOW_MAP(_FlowSpeedX, _FlowSpeedY);
					#end	
					
					half3 normal1 = _WaveInfluenceFactor.x * UnpackNormal(tex2D(_BumpMap, _WaveScale.x * IN.uv_BumpMap + flowMap.rg * _Time.x * _WaveSpeed.x));
					half3 normal2 = _WaveInfluenceFactor.y * UnpackNormal(tex2D(_BumpMap, _WaveScale.y * IN.uv_BumpMap + flowMap.rg * _Time.x * _WaveSpeed.y));
					half3 normal3 = _WaveInfluenceFactor.z * UnpackNormal(tex2D(_BumpMap, _WaveScale.z * IN.uv_BumpMap + flowMap.rg * _Time.x * _WaveSpeed.z));
					half3 normal4 = _WaveInfluenceFactor.w * UnpackNormal(tex2D(_BumpMap, _WaveScale.w * IN.uv_BumpMap + flowMap.rg * _Time.x * _WaveSpeed.w));
									
					fixed3 bumpNormal = normalize(normal1 + normal2 + normal3 + normal4);
				#end
				#begin Decal
					fixed3 bumpNormal = UnpackNormal(tex2D(_BumpMap, IN.uv_BumpMap));
				#end
				o.Normal.xyz = normalize(bumpNormal);  
				
				fixed fresnel = saturate(fresnelTerm(normalize(lerp(fixed3(0, 0, 1), o.Normal.xyz, _FresnelNormalStrength)), normalize(IN.viewDir), _Fresnel, _FresnelFactor, _FresnelBias));
		
				o.Emission  = texCUBE (_ReflectionCube, WorldReflectionVector (IN, lerp(fixed3(0, 0, 1), o.Normal, _DistortionStrength / 100 / 2))).rgb;
				
				#begin Depth
					float2 screenUv = calcScreenUv(IN.screenPos);
					float height = sampleHeight(screenUv);
					o.Alpha = fresnel * saturate(height / _ShoreHeight);
				#end
				#begin !Depth
					o.Alpha = fresnel;
				#end
				#begin Decal
					o.Alpha *= _Transparency * tex2D(_MaskMap, IN.uv_MaskMap).b * lerp(1, max(0, 1-bumpNormal.z), _BumpUpInfluence);			
				#end
			}
	 
			ENDCG
		#end
    }
    Fallback "Diffuse"
	#begin Decal
		CustomEditor "CopyWaterMaterialEditor"
	#end
	#begin !Decal
		CustomEditor "WaterMaterialEditor"
	#end
}