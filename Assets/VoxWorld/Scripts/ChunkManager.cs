//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections;
using UnityEngine;

public class ChunkManager : MonoBehaviour
{

		public float renderSpeed;
		public float initialPoolSize = 2024;
		private LinkedList<GameObject> inactiveChunkPool;
		private LinkedList<Chunk> chunksToUpdate;
		private bool coroutineStarted = false;
		private bool firstRun = true;
		
		void Start ()
		{
				inactiveChunkPool = new LinkedList<GameObject> ();
				chunksToUpdate = new LinkedList<Chunk> ();
				int initialPoolSize = 2024;
				while (inactiveChunkPool.Count < initialPoolSize) {
						GameObject newChunk = createChunk ();
						inactiveChunkPool.AddLast (newChunk);
				}
		}
		
		public GameObject getChunk ()
		{
				if (inactiveChunkPool.Count > 0) {
						LinkedListNode<GameObject> chunkGO = inactiveChunkPool.First;
						inactiveChunkPool.RemoveFirst ();
						return chunkGO.Value;
				} else {
						//Need to create a new chunk
						return createChunk ();
				}
		}
		
		public void freeChunk (GameObject chunk)
		{
				chunk.gameObject.SetActive (false);
				inactiveChunkPool.AddLast (chunk);
		}
		
		public void flagChunkForUpdate (Chunk chunk)
		{
				chunksToUpdate.AddLast (chunk);
		}
		
		// Update is called once per frame
		void Update ()
		{

				if (!coroutineStarted) {
						coroutineStarted = true;
						StartCoroutine ("UpdateChunks");
				}
		}
		
		private void popAndGenerate ()
		{
				//pop the chunk
				Chunk chunk = chunksToUpdate.First.Value;
				chunksToUpdate.RemoveFirst ();
		
				//render the chunk.
				chunk.GenerateMesh ();
		}

		IEnumerator UpdateChunks ()
		{
				for (;;) {
						
						//Wait for the initial chunks to get loaded and load them all at once.
						if (chunksToUpdate.Count > 0 && firstRun) {
								Debug.Log ("only once");
								while (chunksToUpdate.Count > 0) {
										firstRun = false;
										popAndGenerate ();
								}
						}
						if (chunksToUpdate.Count > 0) {
								popAndGenerate ();
						}
						yield return new WaitForSeconds (renderSpeed);
				}
		}

		GameObject createChunk ()
		{
				GameObject newChunk = GameObject.Instantiate (Resources.Load ("Voxel Generators/Chunk")) as GameObject;
				newChunk.SetActive (false);
				newChunk.transform.parent = this.transform;
				newChunk.transform.rotation = new Quaternion (0, 0, 0, 0);
				return newChunk;
		}
}


