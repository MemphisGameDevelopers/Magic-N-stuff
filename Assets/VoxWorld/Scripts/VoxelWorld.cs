//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections.Generic;

public class VoxelWorld : MonoBehaviour
{
	public GameObject regionPrefab;
	public int regionX = 32;
	public int regionY = 32;
	public int regionZ = 32;
	public int distToLoad;
	public int distToUnload;

	private Dictionary<string, Region> regions;
	private VoxelModifyTerrain clientRenderer;

	void Start ()
	{
		regions = new Dictionary<string, Region>();

		Region centerRegion = createRegion(0,0);
		loadAllNeighbors(centerRegion, true);



		clientRenderer = gameObject.AddComponent ("VoxelModifyTerrain") as VoxelModifyTerrain;
		clientRenderer.myRegion = centerRegion;
		clientRenderer.distToLoad = this.distToLoad;
		clientRenderer.distToUnload = this.distToUnload;
	}

	public void changeFocusRegion(Region newRegion){
		//Load up region neighbors. Create a new regions as needed.
		//TODO: Might take a long time. Consider co-routine.
		loadAllNeighbors(newRegion,true);  


	}

	private void loadAllNeighbors(Region region, bool createRegions){

		//North
		Region neighbor = findRegionNeighbor(region,Region.Directions.North);
		if(neighbor == null && createRegions){
			neighbor = createRegion(region.regionXoffset,region.regionZoffset+regionZ);
			loadAllNeighbors(neighbor,false);
		}
		region.setNeighbor(neighbor,Region.Directions.North);

		//South
		neighbor = findRegionNeighbor(region,Region.Directions.South);
		if(neighbor == null && createRegions){
			neighbor = createRegion(region.regionXoffset,region.regionZoffset-regionZ);
			loadAllNeighbors(neighbor,false);
		}
		region.setNeighbor(neighbor,Region.Directions.South);

		//East
		neighbor = findRegionNeighbor(region,Region.Directions.East);
		if(neighbor == null && createRegions ){
			neighbor = createRegion(region.regionXoffset+regionX,region.regionZoffset);
			loadAllNeighbors(neighbor,false);
		}
		region.setNeighbor(neighbor,Region.Directions.East);

		//West
		neighbor = findRegionNeighbor(region,Region.Directions.West);
		if(neighbor == null && createRegions){
			neighbor = createRegion(region.regionXoffset - regionX,region.regionZoffset);
			loadAllNeighbors(neighbor,false);
		}
		region.setNeighbor(neighbor,Region.Directions.West);

		//NorthWest
		neighbor = findRegionNeighbor(region,Region.Directions.NorthWest);
		if(neighbor == null && createRegions){
			neighbor = createRegion(region.regionXoffset-regionX,region.regionZoffset+regionZ);
			loadAllNeighbors(neighbor,false);
		}
		region.setNeighbor(neighbor,Region.Directions.NorthWest);

		//SouthEast
		neighbor = findRegionNeighbor(region,Region.Directions.SouthEast);
		if(neighbor == null && createRegions){
			neighbor = createRegion(region.regionXoffset+regionX,region.regionZoffset-regionZ);
			loadAllNeighbors(neighbor,false);
		}
		region.setNeighbor(neighbor,Region.Directions.SouthEast);

		//NorthEast
		neighbor = findRegionNeighbor(region,Region.Directions.NorthEast);
		if(neighbor == null && createRegions){
			neighbor = createRegion(region.regionXoffset+regionX,region.regionZoffset+regionZ);
			loadAllNeighbors(neighbor,false);
		}
		region.setNeighbor(neighbor,Region.Directions.NorthEast);

		//SouthWest
		neighbor = findRegionNeighbor(region,Region.Directions.SouthWest);
		if(neighbor == null && createRegions){
			neighbor = createRegion(region.regionXoffset - regionX,region.regionZoffset-regionZ);
			loadAllNeighbors(neighbor,false);
		}
		region.setNeighbor(neighbor,Region.Directions.SouthWest);

	}

	private Region findRegionNeighbor(Region region, Region.Directions direction){
		int xOffset = region.regionXoffset;
		int zOffset = region.regionZoffset;
		string key = null;
		Region neighbor = null;
		switch (direction) {
			
		case Region.Directions.North:
			key = xOffset+"|"+(zOffset + region.regionZ);
			break;
		case Region.Directions.South:
			key = xOffset+"|"+(zOffset - region.regionZ);
			break;
		case Region.Directions.East:
			key = (xOffset + region.regionX)+"|"+zOffset;
			break;
		case Region.Directions.West:
			key = (xOffset - region.regionX)+"|"+zOffset;
			break;
		case Region.Directions.NorthEast:
			key = (xOffset + region.regionX) +"|"+(zOffset + region.regionZ);
			break;
		case Region.Directions.NorthWest:
			key = (xOffset - region.regionX) +"|"+(zOffset + region.regionZ);
			break;
		case Region.Directions.SouthEast:
			key = (xOffset + region.regionX) +"|"+(zOffset - region.regionZ);
			break;
		case Region.Directions.SouthWest:
			key = (xOffset - region.regionX) +"|"+(zOffset - region.regionZ);
			break;
		}

		if(regions.ContainsKey(key)){
			neighbor = regions[key];
		}
		return neighbor;

	}

	private Region createRegion(int x, int z){
		GameObject regionGO = Instantiate(regionPrefab,new Vector3(x,0,z),new Quaternion (0, 0, 0, 0)) as GameObject;
		regionGO.transform.parent = this.transform;
		Region region = regionGO.GetComponent("Region") as Region;
		region.regionX = this.regionX;
		region.regionY = this.regionY;
		region.regionZ = this.regionZ;
		region.regionXoffset = (int)regionGO.transform.position.x;
		region.regionZoffset = (int)regionGO.transform.position.z;
		region.createRegionData();
		Debug.Log ("Adding new region at "+region.regionXoffset+","+region.regionZoffset);
		regions.Add(region.hashString(), region);
		return region;
	}

}